import collections

""" Первое задание """


def isEven(value):
    return value % 2 == 0


print(isEven(6))


def even_or_odd(x):
    if x % 2 == 0:
        print('Четное число')


even_or_odd(6)

""" В моём примере можно написать то, что хочешь увидеть в консоле """

print('-' * 30)

""" Второе задание. Часть 1 """


my_list = [5, 4, 7, 6, 1]

example_1 = my_list[1:] + [5]

print('До:', my_list, '\nПосле:', example_1)

print('-' * 30)

""" Второе задание. Часть 2 """

example_2 = collections.deque(maxlen=5)
example_2.extend([5, 4, 7, 6, 1])
example_2.append(5)
print('До:', my_list, '\nПосле:', example_2)

""" Первый способ более простой и из него легко вытащить любые элементы, но при большом количестве цифр будет долго
 выполнятся, в отличии от deque метода,который более эффективный, так как он не копирует всю структуру, когда
    добавляется новый элемент, но из него проблематично доставать элементы"""

print('-' * 30)

""" Третье задание. """


example_3 = sorted(my_list)
print(example_3)

""" Я знаю о многих способов сортировки, но никогда их не применял, так как есть более простой способ (sorted)
Он конечно не самый быстрый (самый быстрый это метод деления массива пополам), но очень прост в использовании )"""
